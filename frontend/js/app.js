// frontend/js/app.js
class PostcardMap {
    constructor() {
        this.map = null;
        this.cities = [];
        this.filteredCities = [];
        this.markers = [];
        this.connections = [];
        this.cityConnections = {};
        this.allLetters = [];
        this.filters = {
            minLetters: 3,        // –ú–∏–Ω–∏–º—É–º –ø–∏—Å–µ–º –¥–ª—è –ø–æ–∫–∞–∑–∞ –≥–æ—Ä–æ–¥–∞
            minConnections: 2,    // –ú–∏–Ω–∏–º—É–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–≤—è–∑–∏
            topCities: 80,        // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ø-N –≥–æ—Ä–æ–¥–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–∏—Å–µ–º
            showConnections: true // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–≤—è–∑–∏
        };
        this.init();
    }

    async init() {
        await this.loadData();
        this.applyFilters();
        this.initMap();
        await this.calculateConnections();
        this.createMarkers();
        if (this.filters.showConnections) {
            this.drawConnections();
        }
        this.initEventListeners();
        this.updateStatistics();
        this.createFilterControls();
    }

    async loadData() {
        try {
            console.log("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞...");
            const response = await fetch('/api/cities');
            this.cities = await response.json();
            console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.cities.length} –≥–æ—Ä–æ–¥–æ–≤`);
            
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –≥–æ—Ä–æ–¥–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–∏—Å–µ–º (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
            this.cities.sort((a, b) => (b.letter_count || 0) - (a.letter_count || 0));
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        }
    }

    applyFilters() {
        console.log("üéõÔ∏è –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤...");
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –≥–æ—Ä–æ–¥–∞
        this.filteredCities = this.cities.filter(city => 
            (city.letter_count || 0) >= this.filters.minLetters
        ).slice(0, this.filters.topCities);
        
        console.log(`üìç –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: ${this.filteredCities.length} –≥–æ—Ä–æ–¥–æ–≤`);
    }

    initMap() {
        this.map = L.map('map').setView([55.7558, 37.6173], 4);

        // –ë–æ–ª–µ–µ —Å–≤–µ—Ç–ª–∞—è –ø–æ–¥–ª–æ–∂–∫–∞ –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏ –º–∞—Ä–∫–µ—Ä–æ–≤
        L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', {
            attribution: '¬© OpenStreetMap, ¬© CartoDB',
            maxZoom: 19
        }).addTo(this.map);

        this.map.setMaxBounds([
            [35.0, 19.0],
            [82.0, 190.0]
        ]);
        
        console.log("üó∫Ô∏è –ö–∞—Ä—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞");
    }

    async calculateConnections() {
        if (!this.filters.showConnections) return;
        
        console.log("üîó –ê–Ω–∞–ª–∏–∑ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –≥–æ—Ä–æ–¥–∞–º–∏...");
        this.cityConnections = {};
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∏—Å—å–º–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
        await this.loadLettersForFilteredCities();
        
        const citiesById = {};
        this.filteredCities.forEach(city => {
            citiesById[city.id] = city;
        });
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∏—Å—å–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–≤—è–∑–µ–π
        this.allLetters.forEach(letter => {
            const cityId = letter.city_id;
            const city = citiesById[cityId];
            
            if (!city) return;
            
            // –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥—Ä—É–≥–∏—Ö –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
            this.filteredCities.forEach(targetCity => {
                if (targetCity.id !== cityId && 
                    targetCity.name && 
                    city.name &&
                    letter.content && 
                    this.hasCityMention(letter.content, targetCity.name)) {
                    
                    const connectionKey = [cityId, targetCity.id].sort().join('-');
                    
                    if (!this.cityConnections[connectionKey]) {
                        this.cityConnections[connectionKey] = {
                            city1: city,
                            city2: targetCity,
                            count: 0
                        };
                    }
                    
                    this.cityConnections[connectionKey].count++;
                }
            });
        });
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–∞–±—ã–µ —Å–≤—è–∑–∏
        const strongConnections = Object.values(this.cityConnections)
            .filter(conn => conn.count >= this.filters.minConnections)
            .sort((a, b) => b.count - a.count)
            .slice(0, 30); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤—è–∑–µ–π
        
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${strongConnections.length} –∑–Ω–∞—á–∏–º—ã—Ö —Å–≤—è–∑–µ–π`);
        
        this.cityConnections = strongConnections;
    }

    async loadLettersForFilteredCities() {
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∏—Å—å–º–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
            const lettersPromises = this.filteredCities.map(city => 
                fetch(`/api/cities/${city.id}`).then(r => r.json())
            );
            
            const citiesData = await Promise.all(lettersPromises);
            this.allLetters = citiesData.flatMap(cityData => cityData.letters || []);
            
            console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.allLetters.length} –ø–∏—Å–µ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–≤—è–∑–µ–π`);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∏—Å–µ–º:', error);
            this.allLetters = [];
        }
    }

    hasCityMention(content, cityName) {
        if (!content || !cityName) return false;
        
        const contentLower = content.toLowerCase();
        const cityNameLower = cityName.toLowerCase();
        
        // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞
        return contentLower.includes(cityNameLower);
    }

    createMarkers() {
        this.markers.forEach(marker => this.map.removeLayer(marker));
        this.markers = [];

        console.log(`üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ –¥–ª—è ${this.filteredCities.length} –≥–æ—Ä–æ–¥–æ–≤`);

        this.filteredCities.forEach(city => {
            if (!city.latitude || !city.longitude) return;

            const lat = parseFloat(city.latitude);
            const lng = parseFloat(city.longitude);
            
            if (isNaN(lat) || isNaN(lng)) return;

            try {
                // –Ø—Ä–∫–∏–π —Å–∏–Ω–∏–π –≥—Ä–∞–¥–∏–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∏—Å–µ–º
                const intensity = Math.min(1, Math.log(city.letter_count || 1) / Math.log(50));
                const hue = 210; // –Ø—Ä–∫–∏–π —Å–∏–Ω–∏–π
                const saturation = 80 + (intensity * 20);
                const lightness = 50 - (intensity * 15);
                
                const marker = L.circleMarker([lat, lng], {
                    radius: this.calculateRadius(city.letter_count),
                    fillColor: `hsl(${hue}, ${saturation}%, ${lightness}%)`,
                    color: '#ffffff',
                    weight: 2, // –£–º–µ–Ω—å—à–∏–ª–∏ —Ç–æ–ª—â–∏–Ω—É –æ–±–≤–æ–¥–∫–∏
                    opacity: 1,
                    fillOpacity: 0.85,
                    className: 'city-marker'
                }).addTo(this.map);

                marker.bindPopup(`
                    <div class="popup-content">
                        <h3>${city.name}</h3>
                        <p><strong>üì® –ü–∏—Å–µ–º:</strong> ${city.letter_count || 0}</p>
                        <button onclick="app.showCityDetail(${city.id})" 
                                class="popup-btn">üìñ –ü–æ–¥—Ä–æ–±–Ω–µ–µ</button>
                    </div>
                `);

                marker.cityId = city.id;
                marker.on('click', () => {
                    this.showCityDetail(city.id);
                });

                marker.on('mouseover', () => {
                    marker.setStyle({
                        fillColor: `hsl(${hue}, 100%, 45%)`,
                        weight: 3
                    });
                    if (this.filters.showConnections) {
                        this.highlightConnections(city.id);
                    }
                });

                marker.on('mouseout', () => {
                    marker.setStyle({
                        fillColor: `hsl(${hue}, ${saturation}%, ${lightness}%)`,
                        weight: 2
                    });
                    if (this.filters.showConnections) {
                        this.resetConnections();
                    }
                });

                this.markers.push(marker);
                
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞ –¥–ª—è ${city.name}:`, error);
            }
        });

        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${this.markers.length} –º–∞—Ä–∫–µ—Ä–æ–≤`);
        
        if (this.markers.length > 0) {
            const group = new L.featureGroup(this.markers);
            this.map.fitBounds(group.getBounds().pad(0.1));
        }
    }

    drawConnections() {
        this.connections.forEach(connection => this.map.removeLayer(connection));
        this.connections = [];

        if (!this.filters.showConnections || this.cityConnections.length === 0) return;

        console.log(`üîÑ –û—Ç—Ä–∏—Å–æ–≤–∫–∞ ${this.cityConnections.length} —Å–≤—è–∑–µ–π`);

        this.cityConnections.forEach(connection => {
            const { city1, city2, count } = connection;
            
            if (!city1.latitude || !city1.longitude || !city2.latitude || !city2.longitude) {
                return;
            }

            // –¢–æ–ª—â–∏–Ω–∞ –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –∑–∞–≤–∏—Å—è—Ç –æ—Ç —Å–∏–ª—ã —Å–≤—è–∑–∏ (—É–º–µ–Ω—å—à–∏–ª–∏ –≤ 2 —Ä–∞–∑–∞)
            const maxCount = Math.max(...this.cityConnections.map(c => c.count));
            const relativeStrength = count / maxCount;
            
            const weight = Math.max(1, Math.min(3, relativeStrength * 3)); // –£–º–µ–Ω—å—à–∏–ª–∏ —Ç–æ–ª—â–∏–Ω—É
            const opacity = Math.max(0.3, Math.min(0.6, relativeStrength * 0.6)); // –£–º–µ–Ω—å—à–∏–ª–∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
            
            const line = L.polyline([
                [city1.latitude, city1.longitude],
                [city2.latitude, city2.longitude]
            ], {
                color: '#1E88E5', // –Ø—Ä–∫–∏–π —Å–∏–Ω–∏–π
                weight: weight,
                opacity: opacity,
                className: 'city-connection'
            }).addTo(this.map);

            line.bindPopup(`
                <div class="connection-popup">
                    <h4>üîó –°–≤—è–∑—å –º–µ–∂–¥—É –≥–æ—Ä–æ–¥–∞–º–∏</h4>
                    <p><strong>${city1.name}</strong> ‚Üî <strong>${city2.name}</strong></p>
                    <p>üìä –°–∏–ª–∞ —Å–≤—è–∑–∏: ${count} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π</p>
                </div>
            `);

            this.connections.push(line);
        });

        console.log(`‚úÖ –ù–∞—Ä–∏—Å–æ–≤–∞–Ω–æ ${this.connections.length} –ª–∏–Ω–∏–π —Å–≤—è–∑–µ–π`);
    }

    highlightConnections(cityId) {
        this.connections.forEach(connection => {
            const connectionData = this.cityConnections.find(conn => 
                conn.city1.id === cityId || conn.city2.id === cityId
            );
            
            if (connectionData) {
                connection.setStyle({
                    color: '#FF6B6B',
                    weight: connection.options.weight + 1, // –£–º–µ–Ω—å—à–∏–ª–∏ –ø–æ–¥—Å–≤–µ—Ç–∫—É
                    opacity: 0.8
                });
            }
        });
    }

    resetConnections() {
        this.connections.forEach(connection => {
            connection.setStyle({
                color: '#1E88E5',
                weight: connection.options.weight,
                opacity: connection.options.opacity
            });
        });
    }

    calculateRadius(letterCount) {
        const count = letterCount || 1;
        // –£–º–µ–Ω—å—à–∏–ª–∏ —Ä–∞–∑–º–µ—Ä –º–∞—Ä–∫–µ—Ä–æ–≤ –≤ 2 —Ä–∞–∑–∞
        return Math.max(6, Math.min(20, Math.log(count) * 5 + 5));
    }

    async showCityDetail(cityId) {
        try {
            const response = await fetch(`/api/cities/${cityId}`);
            const cityData = await response.json();
            
            if (!cityData) return;
            
            this.displayCityPanel(cityData);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π –≥–æ—Ä–æ–¥–∞:', error);
        }
    }

    displayCityPanel(cityData) {
        const panel = document.getElementById('cityPanel');
        const cityName = document.getElementById('cityName');
        const cityLetterCount = document.getElementById('cityLetterCount');
        const lettersList = document.getElementById('lettersList');

        cityName.textContent = cityData.name;
        cityLetterCount.textContent = cityData.letter_count || 0;

        // –ù–∞—Ö–æ–¥–∏–º —Å–≤—è–∑–∏ –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞
        const cityConnections = this.cityConnections.filter(conn => 
            conn.city1.id === cityData.id || conn.city2.id === cityData.id
        );

        let connectionsHTML = '';
        if (cityConnections.length > 0) {
            connectionsHTML = `
                <div class="connections-section">
                    <h4>üîó –°–≤—è–∑–∏ —Å –¥—Ä—É–≥–∏–º–∏ –≥–æ—Ä–æ–¥–∞–º–∏:</h4>
                    ${cityConnections.map(conn => {
                        const otherCity = conn.city1.id === cityData.id ? conn.city2 : conn.city1;
                        return `<div class="connection-item">
                            <span class="city-link">${otherCity.name}</span>
                            <span class="connection-count">${conn.count} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π</span>
                        </div>`;
                    }).join('')}
                </div>
            `;
        }

        if (cityData.letters && cityData.letters.length > 0) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 –ø–∏—Å–µ–º
            const displayLetters = cityData.letters.slice(0, 10);
            lettersList.innerHTML = connectionsHTML + displayLetters.map(letter => `
                <div class="letter-card">
                    <div class="letter-year">${letter.year || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</div>
                    <div class="letter-theme">${letter.theme || '–ª–∏—á–Ω–æ–µ'}</div>
                    <div class="letter-excerpt">${letter.excerpt || '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞'}</div>
                    <div class="letter-sentiment ${letter.sentiment}">
                        ${this.getSentimentEmoji(letter.sentiment)} ${letter.sentiment}
                    </div>
                </div>
            `).join('');
        } else {
            lettersList.innerHTML = connectionsHTML + '<p>–ü–∏—Å—å–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>';
        }

        panel.style.display = 'block';
    }

    getSentimentEmoji(sentiment) {
        const emojis = {
            'positive': 'üòä',
            'negative': 'üòî', 
            'neutral': 'üòê'
        };
        return emojis[sentiment] || 'üìù';
    }

    initEventListeners() {
        document.getElementById('closePanel').addEventListener('click', () => {
            document.getElementById('cityPanel').style.display = 'none';
        });
    }

    async updateStatistics() {
        try {
            const response = await fetch('/api/statistics');
            const stats = await response.json();
            
            // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∏—Å–µ–º - –±–µ—Ä–µ–º –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ API
            document.getElementById('totalLetters').textContent = stats.total_letters || 0;
            document.getElementById('totalCities').textContent = stats.total_cities || 0;
            
            const themesList = document.getElementById('themesList');
            if (stats.popular_themes && stats.popular_themes.length > 0) {
                themesList.innerHTML = stats.popular_themes.map(theme => `
                    <div class="theme-item">
                        <span class="theme-name">${theme.theme}</span>
                        <span class="theme-count">${theme.count}</span>
                    </div>
                `).join('');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        }
    }

    createFilterControls() {
        // –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –≤ –ª–µ–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É
        const filterControl = L.control({ position: 'topleft' });
        
        filterControl.onAdd = (map) => {
            const div = L.DomUtil.create('div', 'filter-control');
            div.innerHTML = `
                <div class="filter-panel">
                    <h4>üéõÔ∏è –§–∏–ª—å—Ç—Ä—ã</h4>
                    
                    <div class="filter-group">
                        <label>–õ–∏–º–∏—Ç –≥–æ—Ä–æ–¥–æ–≤: ${this.filters.topCities}</label>
                        <input type="range" id="cityLimit" min="20" max="150" value="${this.filters.topCities}" 
                               onchange="app.updateFilter('topCities', this.value)">
                    </div>
                    
                    <div class="filter-group">
                        <label>–ú–∏–Ω. –ø–∏—Å–µ–º: ${this.filters.minLetters}</label>
                        <input type="range" id="minLetters" min="1" max="10" value="${this.filters.minLetters}" 
                               onchange="app.updateFilter('minLetters', this.value)">
                    </div>
                    
                    <div class="filter-group checkbox-group">
                        <label>
                            <input type="checkbox" id="showConnections" ${this.filters.showConnections ? 'checked' : ''}
                                   onchange="app.updateFilter('showConnections', this.checked)">
                            –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–≤—è–∑–∏
                        </label>
                    </div>
                    
                    <button onclick="app.applyNewFilters()" class="apply-btn">üîÑ –ü—Ä–∏–º–µ–Ω–∏—Ç—å</button>
                </div>
            `;
            return div;
        };
        
        filterControl.addTo(this.map);
    }

    updateFilter(filterName, value) {
        if (filterName === 'showConnections') {
            this.filters[filterName] = Boolean(value);
        } else {
            this.filters[filterName] = parseInt(value);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º label
        const label = document.querySelector(`label[for="${filterName}"]`);
        if (label) {
            if (filterName === 'showConnections') {
                // –î–ª—è —á–µ–∫–±–æ–∫—Å–∞ –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            } else {
                label.textContent = label.textContent.split(':')[0] + ': ' + this.filters[filterName];
            }
        }
    }

    async applyNewFilters() {
        console.log("üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤...");
        
        const applyBtn = document.querySelector('.apply-btn');
        const originalText = applyBtn.textContent;
        applyBtn.textContent = '‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...';
        applyBtn.disabled = true;
        
        try {
            this.applyFilters();
            
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –º–∞—Ä–∫–µ—Ä—ã –∏ —Å–≤—è–∑–∏
            this.markers.forEach(marker => this.map.removeLayer(marker));
            this.connections.forEach(connection => this.map.removeLayer(connection));
            this.markers = [];
            this.connections = [];
            
            // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–≤—è–∑–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if (this.filters.showConnections) {
                await this.calculateConnections();
            } else {
                this.cityConnections = [];
            }
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –º–∞—Ä–∫–µ—Ä—ã
            this.createMarkers();
            
            // –†–∏—Å—É–µ–º –Ω–æ–≤—ã–µ —Å–≤—è–∑–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if (this.filters.showConnections) {
                this.drawConnections();
            }
            
            console.log("‚úÖ –§–∏–ª—å—Ç—Ä—ã –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ");
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤:', error);
        } finally {
            applyBtn.textContent = originalText;
            applyBtn.disabled = false;
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = new PostcardMap();