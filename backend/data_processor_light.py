import sqlite3
import os
import json
from datetime import datetime
import pandas as pd
import random

class SimpleDB:
    def __init__(self, db_path="postcards.db"):
        self.db_path = db_path
        self.init_db()
        self.load_or_create_data()
    
    def init_db(self):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS cities (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT UNIQUE,
                latitude REAL,
                longitude REAL,
                letter_count INTEGER
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS letters (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                city_id INTEGER,
                year INTEGER,
                content TEXT,
                theme TEXT,
                sentiment TEXT,
                excerpt TEXT,
                FOREIGN KEY (city_id) REFERENCES cities (id)
            )
        ''')
        
        conn.commit()
        conn.close()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def load_or_create_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ"""
        excel_path = "../data/–ü–∏—à—É —Ç–µ–±–µ. –ö–æ—Ä–ø—É—Å –¥–ª—è —Ö–∞–∫–∞—Ç–æ–Ω–∞ (2024).xlsx"
        
        if os.path.exists(excel_path):
            print("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel...")
            try:
                if self.process_excel_data(excel_path):
                    print("‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑ Excel –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
                    return
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ Excel: {e}")
        
        # –ï—Å–ª–∏ Excel –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è, —Å–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
        print("üìù –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ...")
        self.create_demo_data()

    def process_excel_data(self, excel_path):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel"""
        try:
            # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
            df = pd.read_excel(excel_path)
            print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π –∏–∑ Excel")
            
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
            cursor.execute('DELETE FROM letters')
            cursor.execute('DELETE FROM cities')
            
            # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤ –∏ –∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            cities_dict = {}
            city_letters = {}
            
            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏–π –≥–æ—Ä–æ–¥–æ–≤
            def normalize_city_name(city_str):
                if pd.isna(city_str) or city_str in ['[–Ω—Ä–∑–±]', '[–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç]', '–Ω—Ä–∑–±', '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç']:
                    return None
                
                city_str = str(city_str).strip()
                
                # –£–±–∏—Ä–∞–µ–º —É–∫–∞–∑–∞–Ω–∏—è –Ω–∞ –≥—É–±–µ—Ä–Ω–∏–∏
                if '–≥—É–±–µ—Ä–Ω–∏—è' in city_str.lower():
                    parts = city_str.split(',')
                    city_str = parts[-1].strip()
                
                # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã
                for prefix in ['–≥.', '–≥–æ—Ä–æ–¥', '–≥–æ—Ä.', '—Å.', '—Å–µ–ª–æ', '–¥–µ—Ä.', '–¥–µ—Ä–µ–≤–Ω—è']:
                    if city_str.lower().startswith(prefix.lower()):
                        city_str = city_str[len(prefix):].strip()
                
                return city_str if city_str else None
            
            # –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
            for _, row in df.iterrows():
                from_city_raw = row.get('–ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç (–æ—Ç–∫—É–¥–∞)', '')
                to_city_raw = row.get('–ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç (–∫—É–¥–∞)', '')
                
                from_city = normalize_city_name(from_city_raw)
                to_city = normalize_city_name(to_city_raw)
                
                for city_name in [from_city, to_city]:
                    if city_name and city_name not in cities_dict:
                        cities_dict[city_name] = {
                            'latitude': None,
                            'longitude': None,
                            'letter_count': 0
                        }
                        city_letters[city_name] = []
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –≥–æ—Ä–æ–¥–æ–≤
            cities_dict = self.get_cities_coordinates(cities_dict)
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –≥–æ—Ä–æ–¥–∞ –≤ –ë–î
            for city_name, city_data in cities_dict.items():
                if city_data['latitude'] and city_data['longitude']:
                    cursor.execute(
                        'INSERT INTO cities (name, latitude, longitude, letter_count) VALUES (?, ?, ?, ?)',
                        (city_name, city_data['latitude'], city_data['longitude'], 0)
                    )
            
            # –ü–æ–ª—É—á–∞–µ–º ID –≥–æ—Ä–æ–¥–æ–≤
            cursor.execute('SELECT id, name FROM cities')
            city_ids = {name: id for id, name in cursor.fetchall()}
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∏—Å—å–º–∞
            letter_id = 1
            for _, row in df.iterrows():
                from_city = normalize_city_name(row.get('–ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç (–æ—Ç–∫—É–¥–∞)', ''))
                to_city = normalize_city_name(row.get('–ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç (–∫—É–¥–∞)', ''))
                
                content = row.get('–¢–µ–∫—Å—Ç –æ—Ç–∫—Ä—ã—Ç–∫–∏', '')
                if pd.isna(content):
                    content = ''
                
                # –ì–æ–¥ –∏–∑ –¥–∞—Ç—ã
                year = None
                date_str = row.get('–î–∞—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∫–∏ (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è)', '')
                if not pd.isna(date_str):
                    try:
                        date_str = str(date_str)
                        if '.' in date_str:
                            year_str = date_str.split('.')[-1]
                            year = int(year_str)
                            if year < 1800 or year > 2100:
                                year = None
                    except:
                        year = None
                
                # –ï—Å–ª–∏ –≥–æ–¥ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª—Å—è, –ø—Ä–æ–±—É–µ–º –∏–∑ –¥—Ä—É–≥–∏—Ö –ø–æ–ª–µ–π
                if not year:
                    try:
                        other_date = row.get('–î–∞—Ç–∞ –ø–µ—á–∞—Ç–∏ –æ—Ç–∫—Ä—ã—Ç–∫–∏', '')
                        if not pd.isna(other_date):
                            year_str = str(other_date).split('.')[-1]
                            year = int(year_str)
                    except:
                        year = 1900  # –≥–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                
                theme = self.detect_theme(content)
                sentiment = self.analyze_sentiment(content)
                excerpt = content[:100] + '...' if len(content) > 100 else content
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–∞ –¥–ª—è –≥–æ—Ä–æ–¥–æ–≤ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π
                if from_city and from_city in city_ids:
                    city_id = city_ids[from_city]
                    cursor.execute(
                        'INSERT INTO letters (city_id, year, content, theme, sentiment, excerpt) VALUES (?, ?, ?, ?, ?, ?)',
                        (city_id, year, content, theme, sentiment, excerpt)
                    )
                    city_letters[from_city].append(letter_id)
                    letter_id += 1
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–∞ –¥–ª—è –≥–æ—Ä–æ–¥–æ–≤ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
                if to_city and to_city in city_ids and to_city != from_city:
                    city_id = city_ids[to_city]
                    cursor.execute(
                        'INSERT INTO letters (city_id, year, content, theme, sentiment, excerpt) VALUES (?, ?, ?, ?, ?, ?)',
                        (city_id, year, content, theme, sentiment, excerpt)
                    )
                    city_letters[to_city].append(letter_id)
                    letter_id += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –ø–∏—Å–µ–º
            for city_name, letters in city_letters.items():
                if city_name in city_ids:
                    cursor.execute(
                        'UPDATE cities SET letter_count = ? WHERE id = ?',
                        (len(letters), city_ids[city_name])
                    )
            
            conn.commit()
            conn.close()
            
            print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(cities_dict)} –≥–æ—Ä–æ–¥–æ–≤ –∏ {letter_id-1} –ø–∏—Å–µ–º")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Excel: {e}")
            import traceback
            traceback.print_exc()
            return False

    def get_cities_coordinates(self, cities_dict):
        """–ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –≥–æ—Ä–æ–¥–æ–≤"""
        known_coordinates = {
            '–ú–æ—Å–∫–≤–∞': (55.7558, 37.6173),
            '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥': (59.9343, 30.3351),
            '–ü–µ—Ç—Ä–æ–≥—Ä–∞–¥': (59.9343, 30.3351),
            '–û–¥–µ—Å—Å–∞': (46.4825, 30.7233),
            '–¢–∏—Ñ–ª–∏—Å': (41.7225, 44.7925),
            '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É': (47.2225, 39.7188),
            '–†–æ—Å—Ç–æ–≤ –Ω–∞ –î–æ–Ω—É': (47.2225, 39.7188),
            '–†–∏–≥–∞': (56.9496, 24.1052),
            '–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫': (43.1155, 131.8855),
            '–í–æ–ª–æ–≥–¥–∞': (59.2187, 39.8936),
            '–í–µ–ª–∏–∫–∏–π –£—Å—Ç—é–≥': (60.7604, 46.2993),
            '–Ø–ª—Ç–∞': (44.4952, 34.1663),
            '–ö–∏–µ–≤': (50.4501, 30.5234),
            '–•–∞–±–∞—Ä–æ–≤—Å–∫': (48.4802, 135.0719),
            '–ò—Ä–∫—É—Ç—Å–∫': (52.2864, 104.2807),
            '–ß–∏—Ç–∞': (52.0339, 113.4994),
            '–¢—É–ª–∞': (54.1930, 37.6173),
            '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥': (56.3269, 44.0065),
            '–ö–∞–∑–∞–Ω—å': (55.7963, 49.1088),
            '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': (56.8389, 60.6057),
            '–ü–µ—Ä–º—å': (58.0105, 56.2502),
            '–°–∞–º–∞—Ä–∞': (53.1959, 50.1002),
            '–£—Ñ–∞': (54.7355, 55.9587),
            '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä': (45.0355, 38.9750),
            '–í–æ—Ä–æ–Ω–µ–∂': (51.6615, 39.2003),
            '–°–∞—Ä–∞—Ç–æ–≤': (51.5336, 46.0343),
            '–¢–≤–µ—Ä—å': (56.8587, 35.9176),
            '–Ø—Ä–æ—Å–ª–∞–≤–ª—å': (57.6261, 39.8845),
            '–ö–æ—Å—Ç—Ä–æ–º–∞': (57.7678, 40.9269),
            '–í—è—Ç–∫–∞': (58.6036, 49.6680),
            '–û—Ä–ª–æ–≤': (58.5389, 48.8986),
            '–ü—Å–∫–æ–≤': (57.8194, 28.3318),
            '–°–º–æ–ª–µ–Ω—Å–∫': (54.7826, 32.0453),
            '–ö—É—Ä—Å–∫': (51.7304, 36.1926),
            '–ë–µ–ª–≥–æ—Ä–æ–¥': (50.5955, 36.5873),
            '–û—Ä–µ–ª': (52.9703, 36.0635),
            '–¢–∞–º–±–æ–≤': (52.7213, 41.4527),
            '–õ–∏–ø–µ—Ü–∫': (52.6088, 39.5992),
            '–¢–æ–º—Å–∫': (56.4846, 84.9482),
            '–û–º—Å–∫': (54.9885, 73.3242),
            '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫': (55.0084, 82.9357),
            '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫': (56.0153, 92.8932),
            '–ë–∞—Ä–Ω–∞—É–ª': (53.3563, 83.7616),
            '–ö–µ–º–µ—Ä–æ–≤–æ': (55.3547, 86.0873),
            '–ù–æ–≤–æ–∫—É–∑–Ω–µ—Ü–∫': (53.7576, 87.1360),
            '–¢—é–º–µ–Ω—å': (57.1522, 65.5272),
            '–ß–µ–ª—è–±–∏–Ω—Å–∫': (55.1644, 61.4368),
            '–ú–∞–≥–Ω–∏—Ç–æ–≥–æ—Ä—Å–∫': (53.4072, 58.9794),
            '–£–ª—å—è–Ω–æ–≤—Å–∫': (54.3142, 48.4031),
            '–ü–µ–Ω–∑–∞': (53.1950, 45.0183),
            '–ê—Å—Ç—Ä–∞—Ö–∞–Ω—å': (46.3497, 48.0408),
            '–í–æ–ª–≥–æ–≥—Ä–∞–¥': (48.7080, 44.5133),
            '–†—è–∑–∞–Ω—å': (54.6294, 39.7410),
            '–ö–∞–ª—É–≥–∞': (54.5138, 36.2612),
            '–ë—Ä—è–Ω—Å–∫': (53.2436, 34.3634),
            '–ö—É—Ä–≥–∞–Ω': (55.4410, 65.3411),
            '–°—É—Ä–≥—É—Ç': (61.2541, 73.3962),
            '–ù–∏–∂–Ω–µ–≤–∞—Ä—Ç–æ–≤—Å–∫': (60.9397, 76.5694),
            '–°–æ—á–∏': (43.5855, 39.7231),
            '–°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å': (44.6167, 33.5254),
            '–°–∏–º—Ñ–µ—Ä–æ–ø–æ–ª—å': (44.9521, 34.1024),
            '–†–µ–≤–µ–ª—å': (59.4370, 24.7536),
            '–õ–∏–¥–∞': (53.8930, 25.3027),
            '–í–∞—Ä—à–∞–≤–∞': (52.2297, 21.0122),
            '–î—Ä–µ–∑–¥–µ–Ω': (51.0504, 13.7373),
            '–ö–æ–ª–æ–≥—Ä–∏–≤': (58.8275, 44.3189),
            '–ö–æ—Ç–ª–∞—Å': (61.2529, 46.6513),
            '–¶–∞—Ä—Å–∫–æ–µ –°–µ–ª–æ': (59.7167, 30.4167),
            '–ï–∫–∞—Ç–µ—Ä–∏–Ω–æ—Å–ª–∞–≤': (48.4647, 35.0462),
            '–°—É–º—ã': (50.9077, 34.7981),
            '–ú–æ–≥–∏–ª–µ–≤': (53.9007, 30.3310),
            '–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å': (45.0445, 41.9691),
            '–í–µ—Ä—Ö–æ–ø–µ–Ω—å–µ': (51.1175, 37.1819),
            '–°–ª–∞–≤—è–Ω—Å–∫': (48.8534, 37.6255),
            '–ß–µ–ª—è–±–∏–Ω—Å–∫': (55.1644, 61.4368),
            '–ù–∏–∫–∏—Ç–æ–≤–∫–∞': (48.3389, 38.2489),
            '–ú–∏—Ç—Ä–æ—Ñ–∞–Ω–æ–≤—Å–∫–æ–µ': (51.1628, 58.2833),
            '–í—ã—Ä—É': (57.8489, 27.0194),
            '–ú–∞–π–æ—Ä–µ–Ω–≥–æ—Ñ': (56.9833, 24.1333),
            '–ü–µ—Ä–µ–¥–æ–ª—å—Å–∫': (58.5167, 29.9667),
            '–°—Ç—Ä–µ–ª—å–Ω–∞': (59.8572, 30.0594),
            '–ê–ª—É–ø–∫–∞': (44.4197, 34.0431),
            '–°–∏–º–µ–∏–∑': (44.4061, 34.0083),
            '–ë–∞—Ö—á–∏—Å–∞—Ä–∞–π': (44.7528, 33.8608),
            '–ú–∞—Å—Å–∞–Ω–¥—Ä–∞': (44.5181, 34.1883),
            '–ê—Ä—Ç–µ–∫': (44.5497, 34.2928),
        }
        
        for city_name in cities_dict:
            if city_name in known_coordinates:
                cities_dict[city_name]['latitude'], cities_dict[city_name]['longitude'] = known_coordinates[city_name]
            else:
                # –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –†–æ—Å—Å–∏–∏
                cities_dict[city_name]['latitude'] = 55.0 + random.uniform(-10, 15)
                cities_dict[city_name]['longitude'] = 30.0 + random.uniform(-10, 150)
        
        return cities_dict

    def detect_theme(self, content):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–º—É –ø–∏—Å—å–º–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é"""
        if not content:
            return '–ª–∏—á–Ω–æ–µ'
            
        content_lower = content.lower()
        
        if any(word in content_lower for word in ['–ª—é–±–æ–≤', '–º–∏–ª', '–¥–æ—Ä–æ–≥', '—Ü–µ–ª—É—é', '–æ–±–Ω–∏–º–∞—é', '–ª—é–±–∏–º']):
            return '–ª—é–±–æ–≤—å'
        elif any(word in content_lower for word in ['—Å–µ–º—å', '–º–∞–º–∞', '–ø–∞–ø–∞', '–±—Ä–∞—Ç', '—Å–µ—Å—Ç—Ä–∞', '—Ä–æ–¥–∏—Ç–µ–ª', '–¥–µ—Ç–∏']):
            return '—Å–µ–º—å—è'
        elif any(word in content_lower for word in ['–¥—Ä—É–≥', '—Ç–æ–≤–∞—Ä–∏—â', '–ø—Ä–∏—è—Ç–µ–ª—å', '–∑–Ω–∞–∫–æ–º']):
            return '–¥—Ä—É–∂–±–∞'
        elif any(word in content_lower for word in ['–ø–æ–∑–¥—Ä–∞–≤', '—Å –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º', '—Ö—Ä–∏—Å—Ç–æ—Å –≤–æ—Å–∫—Ä–µ—Å–µ', '—Å –ø–∞—Å—Ö–æ–π']):
            return '–ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ'
        elif any(word in content_lower for word in ['—Ä–∞–±–æ—Ç–∞', '—Å–ª—É–∂–±', '–¥–µ–ª–æ', '–±–∏–∑–Ω–µ—Å', '–∑–∞—Ä–∞–±–æ—Ç']):
            return '—Ä–∞–±–æ—Ç–∞'
        elif any(word in content_lower for word in ['—É—á–µ–Ω', '—à–∫–æ–ª', '—É—Ä–æ–∫', '—ç–∫–∑–∞–º–µ–Ω', '—É—á–∏—Ç—å—Å—è']):
            return '—É—á–µ–±–∞'
        else:
            return '–ª–∏—á–Ω–æ–µ'

    def analyze_sentiment(self, content):
        """–ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞"""
        if not content:
            return 'neutral'
            
        content_lower = content.lower()
        
        positive_words = ['—Ä–∞–¥', '—Ö–æ—Ä–æ—à', '–ø—Ä–µ–∫—Ä–∞—Å–Ω', '—Å—á–∞—Å—Ç–ª–∏–≤', '–ª—é–±–æ–≤', '—Å–ø–∞—Å–∏–±–æ', '–∑–¥–æ—Ä–æ–≤', '—É—Å–ø–µ—Ö', '–≤–µ—Å–µ–ª', '–ø—Ä–∏—è—Ç–Ω']
        negative_words = ['—Å–∫—É—á', '–≥—Ä—É—Å—Ç', '—Ç—è–∂–µ–ª', '–±–æ–ª—å–Ω', '–ø–ª–æ—Ö', '–Ω–µ—Å—á–∞—Å—Ç', '–∂–∞–ª—å', '—É–º–µ—Ä', '—Ç—Ä—É–¥–Ω', '–ø—Ä–æ–±–ª–µ–º']
        
        pos_count = sum(1 for word in positive_words if word in content_lower)
        neg_count = sum(1 for word in negative_words if word in content_lower)
        
        if pos_count > neg_count:
            return 'positive'
        elif neg_count > pos_count:
            return 'negative'
        else:
            return 'neutral'

    def create_demo_data(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute('DELETE FROM letters')
        cursor.execute('DELETE FROM cities')
        
        # –î–µ–º–æ-–≥–æ—Ä–æ–¥–∞
        demo_cities = [
            ('–ú–æ—Å–∫–≤–∞', 55.7558, 37.6173, 47),
            ('–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', 59.9343, 30.3351, 38),
            ('–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥', 56.3269, 44.0065, 23),
        ]
        
        cursor.executemany(
            'INSERT INTO cities (name, latitude, longitude, letter_count) VALUES (?, ?, ?, ?)',
            demo_cities
        )
        
        cursor.execute('SELECT id, name FROM cities')
        cities = {name: id for id, name in cursor.fetchall()}
        
        # –î–µ–º–æ-–ø–∏—Å—å–º–∞
        demo_letters = [
            (cities['–ú–æ—Å–∫–≤–∞'], 1910, '–î–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥, –ø–æ–ª—É—á–∏–ª —Ç–≤–æ–µ –ø–∏—Å—å–º–æ –∏–∑ –ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞...', '–¥—Ä—É–∂–±–∞', 'positive', '–î–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥, –ø–æ–ª—É—á–∏–ª —Ç–≤–æ–µ –ø–∏—Å—å–º–æ –∏–∑ –ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞...'),
            (cities['–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥'], 1905, '–õ—é–±–∏–º–∞—è, –∫–∞–∫ –∂–µ —è —Å–∫—É—á–∞—é –ø–æ —Ç–µ–±–µ!...', '–ª—é–±–æ–≤—å', 'positive', '–õ—é–±–∏–º–∞—è, –∫–∞–∫ –∂–µ —è —Å–∫—É—á–∞—é –ø–æ —Ç–µ–±–µ!...'),
        ]
        
        cursor.executemany(
            'INSERT INTO letters (city_id, year, content, theme, sentiment, excerpt) VALUES (?, ?, ?, ?, ?, ?)',
            demo_letters
        )
        
        conn.commit()
        conn.close()
        print("‚úÖ –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã!")

    def get_cities(self):
        conn = sqlite3.connect(self.db_path)
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        
        cursor.execute('SELECT * FROM cities')
        cities = [dict(row) for row in cursor.fetchall()]
        
        conn.close()
        return cities
    
    def get_city_detail(self, city_id):
        conn = sqlite3.connect(self.db_path)
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        
        cursor.execute('SELECT * FROM cities WHERE id = ?', (city_id,))
        city_row = cursor.fetchone()
        city = dict(city_row) if city_row else None
        
        if city:
            cursor.execute('SELECT * FROM letters WHERE city_id = ?', (city_id,))
            letters = [dict(row) for row in cursor.fetchall()]
            city['letters'] = letters
        
        conn.close()
        return city
    
    def get_statistics(self):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('SELECT COUNT(*) FROM letters')
        total_letters = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM cities')
        total_cities = cursor.fetchone()[0]
        
        cursor.execute('SELECT theme, COUNT(*) FROM letters GROUP BY theme')
        themes = [{"theme": row[0] or "–¥—Ä—É–≥–æ–µ", "count": row[1]} for row in cursor.fetchall()]
        
        cursor.execute('SELECT sentiment, COUNT(*) FROM letters GROUP BY sentiment')
        sentiments = [{"sentiment": row[0] or "neutral", "count": row[1]} for row in cursor.fetchall()]
        
        cursor.execute('SELECT MIN(year), MAX(year) FROM letters WHERE year IS NOT NULL')
        year_range = cursor.fetchone()
        years_range = [year_range[0] or 1900, year_range[1] or 1950]
        
        conn.close()
        
        return {
            "total_letters": total_letters,
            "total_cities": total_cities,
            "years_range": years_range,
            "popular_themes": sorted(themes, key=lambda x: x["count"], reverse=True)[:5],
            "sentiment_distribution": sentiments
        }

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ë–î - –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∑—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
db = SimpleDB()